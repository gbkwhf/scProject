<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/4
 * Time: 11:07
 */

namespace App\Http\Controllers\SecondExploit;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests;


/**
 * Class OtherOnlyController
 * @package App\Http\Controllers\SecondExploit
 * 该控制器主要开发一些功能独立的接口
 */
class OtherOnlyController extends  Controller
{


    //1.发布售后问题咨询
    public function pubAfterConsult(Request $request)
    {
        $validator = $this->setRules([
            'ss' => 'required|string',
            'problem' => 'required|string', //售后咨询的问题
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id


        $insert = \DB::table('ys_after_exchange')->insert([

               'user_id'=>$user_id,
               'user_problem'=>$request->problem,
               'merchant_reply'=>'',
               'created_at'=>\DB::Raw('now()')
        ]);


        if($insert)
            return  $this->respond($this->format([],true));
        else
            return $this->setStatusCode(9998)->respondWithError($this->message);

    }


    //2.获取售后问题咨询列表
    public function getAfterConsultList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'page' => 'integer', //分页页码，默认值为1
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页
        $data = \DB::table('ys_after_exchange as a')
                 ->leftjoin('ys_member as b','a.user_id','=','b.user_id')
                 ->select('a.*','b.name')
                 ->orderBy('a.id','desc');
         $num = $data->get();
         $data = $data->skip($start)->take(10)->get();


        if($data){

            $result['data'] = $data;
            $result['num']  = count($num);
            return  $this->respond($this->format($result,true));
        }else{
            return $this->setStatusCode(9998)->respondWithError($this->message);
        }

    }


    //3.首页搜索商品
    public function getSarchComList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'search' => 'string', //要搜索的商品列表
            'page'=>'integer',//分页的页码
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);
        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页

        $data = \DB::table('ys_goods as a')
                    ->leftjoin('ys_goods_image as b','a.id','=','b.goods_id')
                    ->select('a.id as goods_id','a.name as goods_name','a.num','a.price','a.sales','b.image')
                    ->where('a.state',1); //0下架1上架

        if(empty($request->search)){
            $data =$data->groupBy('a.id')
                            ->orderBy('a.sort','asc')
                            ->orderBy('a.id','asc')
                            ->skip($start)
                            ->take(10)
                            ->get();

        }else{
            $data =$data->where('a.name','like','%'.$request->search.'%')
                        ->groupBy('a.id')
                        ->orderBy('a.sort','asc')
                        ->orderBy('a.id','asc')
                        ->skip($start)
                        ->take(10)
                        ->get();
        }


        $result = empty($data) ? [] : $data;
        $http = getenv('HTTP_REQUEST_URL');
        //改变图片链接，使其可以直接访问
        if(!empty($result)){
            foreach($result as $k=>$v){
                $result[$k]->image = empty($v->image) ? "" : $http.$v->image;
            }
        }
        return  $this->respond($this->format($result));


    }


    //4.获取首页数据
    public function getIndexData(Request $request){

        $validator = $this->setRules([
            'ss' => 'required|string',
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


        //轮播图
        $banner_list = \DB::table('ys_banner_manage')->select('id','img_url','sort')->orderBy('sort','asc')->limit(6)->get();

        if(!empty($banner_list)){
            foreach($banner_list as $k=>$v){
                $banner_list[$k]->img_url = empty($v->img_url) ? "" :  env('HTTP_REQUEST_URL').$v->img_url;
            }
        }else{
            $banner_list = [];
        }


        //获取商品分类的一级分类
        $goods_first_list = \DB::table('ys_goods_class')->select('id as goods_first_id','name as goods_first_name')->where('first_id','=',0)->orderBy('sort','asc')->get();

       //获取按门店商品分类的一级分类
        $store_first_list = \DB::table('ys_store_class')->select('id as store_first_id','name as store_first_name')->where('first_id','=',0)->orderBy('sort','asc')->get();


        $data = [];
        $data['banner'] = $banner_list;
        $data['goods_first_list'] = $goods_first_list;
        $data['store_first_list'] = $store_first_list;

        return  $this->respond($this->format($data));

    }


    //5.获取门店二级分类信息列表
     public function   getSecondInfo(Request $request)
     {

         $validator = $this->setRules([
             'ss' => 'required|string',
             'store_first_id'=>'required|integer' //门店一级分类id
         ])
             ->_validate($request->all());

         if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


         $second_list = \DB::table('ys_store_class')
                            ->select('id as store_second_id','name as store_second_name')
                            ->where('first_id','=',$request->store_first_id)
                            ->get();

         return  $this->respond($this->format($second_list));

     }


    //根据门店二级分类获取对应的门店列表(即供应商列表)
    public function getStoreList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'store_second_id'=>'required|integer', //二级分类id
            'page'=>'integer'
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页
        $store_list = \DB::table('ys_supplier')
                           ->where('class_id',$request->store_second_id)
                           ->select('id as store_id','name as store_name','mobile as store_mobile','logo','free_shipping')
                           ->skip($start)
                           ->take(10)
                           ->get();


        if(!empty($store_list)){
            foreach($store_list as $k=>$v){
                $store_list[$k]->logo = empty($v->logo) ? "" : env('HTTP_REQUEST_URL').$v->logo;
            }
        }else{
            $store_list = [];
        }

        return  $this->respond($this->format($store_list));

    }


    //7.根据门店id获取门店分类列表
    public function getStoreClassList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'store_id'=>'required|integer', //门店id
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


        $store_class_list = \DB::table('ys_store_goods_class')
                                ->select('id as store_class_id','name as store_class_name')
                                ->where('store_id',$request->store_id)
                                ->orderBy('sort','asc')
                                ->get();


        return  $this->respond($this->format($store_class_list));


    }


    //8.根据门店分类id获取商品列表
    public function getStoreClassGoodsList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'store_class_id'=>'required|integer', //门店分类id
            'page'=>'integer' //分页
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页

        $store_class_goods = \DB::table('ys_goods as a')
                                 ->leftjoin('ys_goods_extend as b','a.id','=','b.goods_id')
                                 ->leftjoin('ys_goods_image as c','a.id','=','c.goods_id')
                                 ->select('a.id as goods_id','a.name as goods_name','b.name as spec_name',
                                             'b.market_price','b.price','c.image')
                                 ->where('a.state',1) //0下架1上架
                                 ->where('a.store_class',$request->store_class_id)
                                 ->groupBy('a.id')
                                 ->skip($start)
                                 ->take(10)
                                 ->get();


        if(!empty($store_class_goods)){
            $http = getenv('HTTP_REQUEST_URL');
            foreach($store_class_goods as $k=>$v){
                //改变图片链接，使其可以直接访问
                $store_class_goods[$k]->image =  empty($v->image) ? "" : $http. $v->image;
            }
        }

        return  $this->respond($this->format($store_class_goods));

    }




}