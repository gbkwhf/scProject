<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/4
 * Time: 11:07
 */

namespace App\Http\Controllers\SecondExploit;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests;


/**
 * Class OtherOnlyController
 * @package App\Http\Controllers\SecondExploit
 * 该控制器主要开发一些功能独立的接口
 */
class OtherOnlyController extends  Controller
{


    //1.发布售后问题咨询
    public function pubAfterConsult(Request $request)
    {
        $validator = $this->setRules([
            'ss' => 'required|string',
            'problem' => 'required|string', //售后咨询的问题
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id


        $insert = \DB::table('ys_after_exchange')->insert([

               'user_id'=>$user_id,
               'user_problem'=>$request->problem,
               'merchant_reply'=>'',
               'created_at'=>\DB::Raw('now()')
        ]);


        if($insert)
            return  $this->respond($this->format([],true));
        else
            return $this->setStatusCode(9998)->respondWithError($this->message);

    }


    //2.获取售后问题咨询列表
    public function getAfterConsultList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'page' => 'integer', //分页页码，默认值为1
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页
        $data = \DB::table('ys_after_exchange as a')
                 ->leftjoin('ys_member as b','a.user_id','=','b.user_id')
                 ->select('a.*','b.name')
                 ->orderBy('a.id','desc');
         $num = $data->get();
         $data = $data->skip($start)->take(10)->get();



        $result['data'] = $data;
        $result['num']  = count($num);
        return  $this->respond($this->format($result,true));

    }


    //3.首页搜索商品
    public function getSarchComList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'search' => 'string', //要搜索的商品列表
            'page'=>'integer',//分页的页码
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);
        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页

        $data = \DB::table('ys_goods as a')
                    ->leftjoin('ys_goods_extend as b','a.id','=','b.goods_id')
                    ->leftjoin('ys_goods_image as c','a.id','=','c.goods_id')
                    ->select('a.id as goods_id','a.name as goods_name','b.name as spec_name',
                        'b.market_price','b.price','b.id as ext_id','c.image')
                    ->whereNull('deleted_at')
                    ->where('a.state',1); //0下架1上架

        if(empty($request->search)){

            $data =$data->groupBy('a.id')
                            ->orderBy('a.sort','asc')
                            ->orderBy('a.id','asc')
                            ->skip($start)
                            ->take(10)
                            ->get();

        }else{
            $data =$data->where('a.name','like','%'.$request->search.'%')
                        ->groupBy('a.id')
                        ->orderBy('a.sort','asc')
                        ->orderBy('a.id','asc')
                        ->skip($start)
                        ->take(10)
                        ->get();
        }


        $result = empty($data) ? [] : $data;
        $http = getenv('HTTP_REQUEST_URL');
        //改变图片链接，使其可以直接访问
        if(!empty($result)){
            foreach($result as $k=>$v){
                $result[$k]->image = empty($v->image) ? "" : $http.$v->image;
            }
        }
        return  $this->respond($this->format($result));


    }


    //4.获取首页数据
    public function getIndexData(Request $request){

        $validator = $this->setRules([
            'ss' => 'required|string',
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


        //轮播图
        $banner_list = \DB::table('ys_banner_manage')->select('id','img_url','sort')->orderBy('sort','asc')->limit(6)->get();

        if(!empty($banner_list)){
            foreach($banner_list as $k=>$v){
                $banner_list[$k]->img_url = empty($v->img_url) ? "" :  env('HTTP_REQUEST_URL').$v->img_url;
            }
        }else{
            $banner_list = [];
        }


        //获取商品分类的一级分类
        $goods_first_list = \DB::table('ys_goods_class')->select('id as goods_first_id','name as goods_first_name')->where('first_id','=',0)->orderBy('sort','asc')->get();

       //获取按门店商品分类的一级分类
        $store_first_list = \DB::table('ys_store_class')->select('id as store_first_id','name as store_first_name')->where('first_id','=',0)->orderBy('sort','asc')->get();


        //获取首页  新品上线（10个最新产品即可）
        $new_goods = \DB::table('ys_goods as a')
                        ->leftjoin('ys_goods_extend as b','a.id','=','b.goods_id')
                        ->leftjoin('ys_goods_image as c','a.id','=','c.goods_id')
                        ->select('a.id as goods_id','a.name as goods_name','b.name as spec_name',
                            'b.market_price','b.price','b.id as ext_id','c.image')
                        ->where('a.state',1) //0下架1上架
                        ->groupBy('a.id')
                        //->orderBy('a.sort','asc')
                        ->orderBy('a.id','desc') //也就是时间顺序，倒序
                        ->limit(10)
                        ->get();

        $http = getenv('HTTP_REQUEST_URL');
        //改变图片链接，使其可以直接访问
        if(!empty($new_goods)){
            foreach($new_goods as $k=>$v){
                $new_goods[$k]->image = empty($v->image) ? "" : $http.$v->image;
            }
        }


        $data = [];
        $data['banner'] = $banner_list;
        $data['goods_first_list'] = $goods_first_list;
        $data['store_first_list'] = $store_first_list;
        $data['new_goods'] = $new_goods;

        return  $this->respond($this->format($data));

    }


    //5.获取门店二级分类信息列表
     public function   getSecondInfo(Request $request)
     {

         $validator = $this->setRules([
             'ss' => 'required|string',
             'store_first_id'=>'required|integer' //门店一级分类id
         ])
             ->_validate($request->all());

         if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


         $second_list = \DB::table('ys_store_class')
                            ->select('id as store_second_id','name as store_second_name')
                            ->where('first_id','=',$request->store_first_id)
                            ->get();

         return  $this->respond($this->format($second_list));

     }


    //根据门店二级分类获取对应的门店列表(即供应商列表)
    public function getStoreList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'store_second_id'=>'required|integer', //二级分类id
            'page'=>'integer'
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页
        $store_list = \DB::table('ys_supplier')
                           ->where('class_id',$request->store_second_id)
                           ->select('id as store_id','name as store_name','mobile as store_mobile','logo','free_shipping')
                           ->skip($start)
                           ->take(10)
                           ->get();


        if(!empty($store_list)){
            foreach($store_list as $k=>$v){
                $store_list[$k]->logo = empty($v->logo) ? "" : env('HTTP_REQUEST_URL').$v->logo;
            }
        }else{
            $store_list = [];
        }

        return  $this->respond($this->format($store_list));

    }


    //7.根据门店id获取门店分类列表
    public function getStoreClassList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'store_id'=>'required|integer', //门店id
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


        $store_class_list = \DB::table('ys_store_goods_class')
                                ->select('id as store_class_id','name as store_class_name')
                                ->where('store_id',$request->store_id)
                                ->orderBy('sort','asc')
                                ->get();


        return  $this->respond($this->format($store_class_list));


    }


    //8.根据门店分类id获取商品列表
    public function getStoreClassGoodsList(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'store_class_id'=>'required|integer', //门店分类id
            'page'=>'integer' //分页
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页

        $store_class_goods = \DB::table('ys_goods as a')
                                 ->leftjoin('ys_goods_extend as b','a.id','=','b.goods_id')
                                 ->leftjoin('ys_goods_image as c','a.id','=','c.goods_id')
                                 ->select('a.id as goods_id','a.name as goods_name','b.name as spec_name',
                                             'b.market_price','b.price','b.id as ext_id','c.image')
                                 ->where('a.state',1) //0下架1上架
                                 ->whereNull('deleted_at')
                                 ->where('a.store_class',$request->store_class_id)
                                 ->groupBy('a.id')
                                 //->orderBy('a.sort','asc')
                                 ->orderBy('a.id','desc') //也就是时间顺序，倒序
                                 ->skip($start)
                                 ->take(10)
                                 ->get();


        if(!empty($store_class_goods)){
            $http = getenv('HTTP_REQUEST_URL');
            foreach($store_class_goods as $k=>$v){
                //改变图片链接，使其可以直接访问
                $store_class_goods[$k]->image =  empty($v->image) ? "" : $http. $v->image;
            }
        }

        return  $this->respond($this->format($store_class_goods));

    }


    //9.获取商品二级分类信息列表
    public function getGoodSecondList(Request $request)
    {
        $validator = $this->setRules([
            'ss' => 'required|string',
            'goods_first_id'=>'required|integer', //商品一级分类id

        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


        $data = \DB::table('ys_goods_class')
                           ->select('id as goods_second_id','name as goods_second_name')
                           ->where('first_id',$request->goods_first_id)
                           ->orderBy('sort','asc')
                           ->get();

        return  $this->respond($this->format($data));

    }


    //10.根据商品二级分类获取商品列表
    public function  getGoodsClassList(Request $request)
    {
        $validator = $this->setRules([
            'ss' => 'required|string',
            'goods_second_id'=>'required|integer', //商品二级分类id
            'page'=>'integer' //分页
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);


        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页

        $data = \DB::table('ys_goods as a')
                        ->leftjoin('ys_goods_extend as b','a.id','=','b.goods_id')
                        ->leftjoin('ys_goods_image as c','a.id','=','c.goods_id')
                        ->select('a.id as goods_id','a.name as goods_name','b.name as spec_name',
                            'b.market_price','b.price','b.id as ext_id','c.image')
                        ->where('a.state',1) //0下架1上架
                        ->whereNull('deleted_at')
                        ->where('a.class_id',$request->goods_second_id)
                        ->groupBy('a.id')
                        //->orderBy('a.sort','asc')
                        ->orderBy('a.id','desc') //也就是时间顺序，倒序
                        ->skip($start)
                        ->take(10)
                        ->get();

        $result = empty($data) ? [] : $data;
        $http = getenv('HTTP_REQUEST_URL');
        //改变图片链接，使其可以直接访问
        if(!empty($result)){
            foreach($result as $k=>$v){
                $result[$k]->image = empty($v->image) ? "" : $http.$v->image;
            }
        }
        return  $this->respond($this->format($result));

    }


    //11.发表评论
    public function publishGoodsComment(Request $request){


        $validator = $this->setRules([
            'ss' => 'required|string',
            'buy_goods_id' => 'required|integer', //所购买商品的订单id
            'contents' => 'required|string',//评论内容

        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id


        $is_true = \DB::table('ys_order_goods as a')
                    ->leftjoin('ys_sub_order as b','a.sub_id','=','b.id')
                    ->leftjoin('ys_base_order as c','b.base_id','=','c.id')
                    ->select('a.id','a.sub_id','b.base_id','c.user_id','a.user_comment','a.comment_image')
                    ->where('a.id',$request->buy_goods_id)
                    ->first();

        if(!empty($is_true->user_comment) || !empty($is_true->comment_image)){ //表示该商品您已经评价过了 6015

            return $this->setStatusCode(6015)->respondWithError($this->message);
        }

        if(!empty($is_true) && $is_true->user_id == $user_id){


            if ($request->hasFile('image')){//图片上传

                $file_name=uploadPic($request->file('image'));

            }elseif(empty($request->contents)){

                return $this->setStatusCode(6016)->respondWithError($this->message);//评价内容和评价图片不能同时为空
            }else{

                $file_name="";
            }


            $insert = \DB::table('ys_order_goods')->where('id',$request->buy_goods_id)->update([

                   'user_comment'=>empty($request->contents) ? "" : $request->contents,
                   'comment_image'=>$file_name
            ]);

            if($insert){

                return  $this->respond($this->format([],1));
            }else{
                return $this->setStatusCode(9998)->respondWithError($this->message);
            }

        }else{ //没找到记录或您无权评价 6014
            return $this->setStatusCode(6014)->respondWithError($this->message);
        }

    }


    //12.获取返利流水
    public function getRebateBill(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'page' => 'integer',
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id
        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页


        $bill_list = \DB::table('ys_bills')->select('amount','pay_describe','created_at','type')->where('user_id',$user_id)->orderBy('created_at','desc');

        $num = $bill_list->get();

        //返利流水记录
        $data = $bill_list->skip($start)->take(10)->get();

        $all_money = 0; //总返利金额
        if(!empty($num)){
            foreach($num as $k=>$v){
                $all_money += $v->amount;
            }
        }


        $underway_rebate = \DB::table('ys_base_order as b')
                            ->leftjoin('ys_sub_order as a','a.base_id','=','b.id')
                            ->select('a.all_rebate','b.user_id','b.pay_time')
                            ->where('a.receive_state',0) //是否确认收货，0未确认，1已确认
                            ->where('b.user_id',$user_id)
                            ->where('b.state',1) //订单状态0未付款，1，已付款
                            ->get();


        $underway_rebate_money = 0;//正在冻结中的返利
        if(!empty($underway_rebate)){

            foreach($underway_rebate as $k=>$v)
            {
                $days = (strtotime(date("Y-m-d"),time()) - strtotime(substr($v->pay_time,0,10))) / 86400;
                //把每一个冻结中的返利加起来
                $underway_rebate_money  += sprintf("%.2f", 1/365 * $v->all_rebate * $days);
            }
        }


      $result = [];
      $result['all_money'] = $all_money ; //总返利金额
      $result['underway_rebate_money'] = $underway_rebate_money; //正在进行中的返利金额
      $result['date'] = date("Y-m-d H:i:s");//当前日期时间
      $result['bill_list'] = $data; //返利流水记录

        return  $this->respond($this->format($result));

    }



   public function getTestData(){





   }


    public function applyInviteRole(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'mobile' => 'required',
            'open_id' => 'required',
            'name' => 'string',
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        $user_info=\App\MemberModel::where('user_id',$user_id)->first();

        $user_deposit_config=config('clinic-config.deposit');

        if($user_info->user_lv<=0){
           return $this->setStatusCode(6200)->respondWithError($this->message);
        }
        $order_id=generatorOrderIdNew();
        $price=$user_deposit_config[$user_info->user_lv]-$user_info->deposit;

        if($price<=0){
            return $this->setStatusCode(6200)->respondWithError($this->message);
        }

        $params=[
            'order_id'=>$order_id,
            'user_id'=>$user_id,
            'mobile'=>$request->mobile,
            'name'=>$request->name,
            'user_lv'=>$user_info->user_lv,
            'price'=>$price,
            'state'=>0,
            'confirm_state'=>0
        ];

        \App\ApplyInviteRoleModel::create($params);



        $filling=3;
        //支付方式
        $filling_type=config('clinic-config.filling_type.'.$filling);

        //吊起支付
        $obj=new \Acme\Repository\UnitePay($filling_type,'deposit_order');
        if ($filling==3){ //微信js（公众号支付）
            $open_id=$request->input("open_id");
            $wechatJsParam=["open_id"=>$open_id];
        }else{
            $wechatJsParam=[];
        }

        //支付
        $response=$obj->purchase($order_id,'会员押金',$price,$wechatJsParam);

        //失败提示
        if($response===false)  return $this->setStatusCode(9998)->respondWithError($this->message);

        \Log::info('the '.$filling_type.' url is', ['res'=>$response]);
        return $this->respond($this->format($response));

    }


    public function applyReturn(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        $user_info=\App\MemberModel::where('user_id',$user_id)->first();

        $apply_info=\App\ApplyReturnModel::where('user_id',$user_id)->where('confirm_state',0)->first();

        if($apply_info){


            return  $this->respond($this->format('应退押金'.$user_info->deposit.'元'));
            //return $this->setStatusCode(6202)->respondWithError($this->message);
        }

        $params=[
            'user_id'=>$user_id,
            'confirm_state'=>0
        ];

        \App\ApplyReturnModel::create($params);



        return  $this->respond($this->format('提交成功'));

    }


}