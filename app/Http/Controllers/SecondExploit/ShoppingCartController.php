<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/17
 * Time: 9:54
 */

namespace App\Http\Controllers\SecondExploit;


use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests;


/**
 * Class ShoppingCartController
 * @package App\Http\Controllers\SecondExploit
 * 该控制器主要用于购物车模块
 */
class ShoppingCartController extends  Controller{


    //1.获取购物车中商品信息
    public function getV2GoodsCarInfo(Request $request){

        $validator = $this->setRules([
            'ss' => 'required|string',
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id


        //查询购物车商品
        $goods_info = \DB::table('ys_goods_car as a')
                        ->leftjoin('ys_goods as b','a.goods_id','=','b.id')
                        ->leftjoin('ys_goods_extend as d','a.ext_id','=','d.id')
                        ->leftjoin('ys_goods_image as c','a.goods_id','=','c.goods_id')
                        ->leftjoin('ys_supplier as e','a.supplier_id','=','e.id')
                        ->select('a.id as car_id','a.goods_id','a.supplier_id','a.number','a.state','a.ext_id','a.updated_at as date',
                                 'b.name as goods_name','b.shipping_price','c.image','d.name as spec_name','d.market_price','d.price','d.num as repertory_num',
                                  'e.name as supplier_name','e.logo','e.free_shipping')
                        ->where('a.user_id',$user_id)
                        ->where('b.state',1) //0下架1上架
                        ->orderBy('a.updated_at','desc')
                        ->groupBy('a.id')
                        ->get();


        $tmp = [];
        $all_price = 0;
        //按照供应商（门店）对购物车中的商品进行分组
        if(!empty($goods_info)){

            $http = getenv('HTTP_REQUEST_URL');
            foreach($goods_info as $k=>$v){

                if($v->state == 1){ //计算选中商品的总价
                    $all_price  +=  $v->number * $v->price;
                }

                //改变图片链接，使其可以直接访问
                $goods_info[$k]->image = empty($v->image) ? "" : $http.$v->image;
                $goods_info[$k]->logo = empty($v->logo) ? "" : $http.$v->logo;

                $arr = [
                          'supplier_id'=>$v->supplier_id,
                          'supplier_name'=>$v->supplier_name,
                          'logo'=>$v->logo,
                          'free_shipping'=>$v->free_shipping,//供应商免邮价格
                           'others'=>[],
                    ];
                if(!in_array($arr,$tmp)){
                    array_push($tmp,$arr);
                }
            }

           foreach($tmp as $k=>$v){
               foreach($goods_info as $kk=>$vv){
                   if($v['supplier_id'] == $vv->supplier_id){

                        array_push($tmp[$k]['others'],[

                               'car_id'=>$vv->car_id,
                               'goods_id'=>$vv->goods_id,
                               'supplier_id'=>$vv->supplier_id,
                               'number'=>$vv->number,
                               'state'=>$vv->state,
                               'ext_id'=>$vv->ext_id,
                               'date'=>$vv->date,
                               'goods_name'=>$vv->goods_name,
                               'image'=>$vv->image,
                               'spec_name'=>$vv->spec_name,
                               'market_price'=>$vv->market_price,
                               'price'=>$vv->price,
                               'repertory_num'=>$vv->repertory_num,
                               'shipping_price'=>$vv->shipping_price,
                        ]);
                   }
               }
           }

        }

        $data = [];
        $data['info'] = $tmp;
        $data['price'] = $all_price;
        return  $this->respond($this->format($data,true));
    }

    //2.创建购物车，给购物车中添加商品信息(功能作用是直接从商品详情页面调用该接口)
    public function addV2GoodsCar(Request $request){

        $validator = $this->setRules([
            'ss' => 'required|string',
            'goods_id' => 'required|integer', //商品id
            'ext_id' => 'required|integer',//商品扩展表id
            'number' => 'required|integer|min:1', //商品数量，最少为1个
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        //首先判断该商品是否存在
        $goods_info = \DB::table('ys_goods as a')
                        ->leftjoin('ys_goods_image as b','a.id','=','b.goods_id')
                        ->leftjoin('ys_goods_extend as c','a.id','=','c.goods_id')
                        ->select('a.id as goods_id','a.supplier_id','c.market_price','c.price','c.cost_price','c.num','c.name as spec_name',
                                  'a.name as goods_name','a.sales','a.class_id','a.store_class','b.image')
                        ->where('a.id',$request->goods_id)
                        ->where('c.id',$request->ext_id)
                        ->where('a.state',1) //0下架1上架
                        ->groupBy('a.id')
                        ->first();

        if(empty($goods_info)){ //该商品不存在
            return $this->setStatusCode(1042)->respondWithError($this->message);
        }
        //判断该商品是否已经加入购物车了
        $is_exist = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('ext_id',$request->ext_id)->where('goods_id',$request->goods_id)->first();
        //判断库存是否足够
        if(empty($is_exist) && ($request->number > $goods_info->num)){
            //库存不足 1046
            return $this->setStatusCode(1046)->respondWithError($this->message);
        }elseif( !empty($is_exist) && (($is_exist->number + $request->number) > $goods_info->num)){
            //库存不足
            return $this->setStatusCode(1046)->respondWithError($this->message);
        }


        \DB::beginTransaction(); //开启事务
        if(empty($is_exist)){ //如果为空，则继续插入数据，否则不做任何处理

            $http = getenv('HTTP_REQUEST_URL');
            //改变图片链接，使其可以直接访问
            $goods_info->image =  empty($goods_info->image) ? "" : $http. $goods_info->image;

            //然后把收集到的数据插入数据库:购物车表
            $insert = \DB::table('ys_goods_car')->insert([

                'user_id' => $user_id,
                'goods_id' => $request->goods_id,
                'number' => $request->number,
                'supplier_id' => $goods_info->supplier_id,//供应商id
                'state'=>1,//1选中  0不选中
                'created_at' => \DB::Raw('Now()'),
                'updated_at' => \DB::Raw('Now()'),
                'ext_id'=>$request->ext_id,
            ]);

        }else{ //如果该商品已经存在购物车，则直接返回成功状态即可

            $insert = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('ext_id',$request->ext_id)->where('goods_id',$request->goods_id)->update([
                'number'=>$is_exist->number + $request->number,
                'state'=>1,//1选中  0不选中
                'updated_at'=>\DB::Raw('Now()')
            ]);

        }

        if ($insert) {
            \DB::commit();
            return  $this->respond($this->format([],true));
        }else {
            \DB::rollBack();
            return $this->setStatusCode(9998)->respondWithError($this->message);
        }

    }


    //3.更改购物车中某条商品的数量（1:加号   2:减号 ）  ---》该加减只能用于购物车中的加减
    public function updateV2GoodsNumber(Request $request){


        $validator = $this->setRules([
            'ss' => 'required|string',
            'car_id' => 'required|integer', //购物车id
            'symbol' => 'required|integer|in:1,2', //1:加号   2:减号
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        //接着判断该商品是否在购物车中
        $is_exist = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->first();

        if(empty($is_exist)) { //如果为空，则表示该购物车记录不存在
            return $this->setStatusCode(1043)->respondWithError($this->message);

        }else{ //否则就直接更改数量


            //判断商品库存是否充足
            $num = \DB::table('ys_goods_car as a')
                          ->leftjoin('ys_goods_extend as b','a.ext_id','=','b.id')
                          ->select('b.num')
                          ->where('a.id',$request->car_id)
                          ->first();

            if(empty($num)){ //该商品不存在
                return $this->setStatusCode(1042)->respondWithError($this->message);
            }


            //接着判断加减，每次加减完成之后，需要把该用户的购物车中的商品总金额算出来，返回去
            if($request->symbol == 1){ //加1

                 if($num->num < $is_exist->number+1){
                     return $this->setStatusCode(1046)->respondWithError($this->message);
                 }

                $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->update(['number'=>$is_exist->number+1,'updated_at'=>\DB::Raw('Now()')]);

            }elseif($request->symbol == 2){ //减1（如果本身就是1个，那么就没办法继续减了）

                if($is_exist->number >= 2){ //只有数量超过2，才能保证减1的情况下，其数量还有1个
                    $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->update(['number'=>$is_exist->number-1,'updated_at'=>\DB::Raw('Now()')]);
                }else{
                    $update = 1;
                }
            }

            if($update){
                return  $this->respond($this->format([],1));
            }else{
                return $this->setStatusCode(9998)->respondWithError($this->message);
            }

        }


    }


    //4.删除购物车中的商品
    public function deleteV2GoodsCar(Request $request){

        $validator = $this->setRules([
            'ss' => 'required|string',
            'car_id' => 'required|integer' //购物车id
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        //判断该条记录是否存在
        $goods_info = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->first();
        if(empty($goods_info)){ //未找到该条购物车记录
            return $this->setStatusCode(1043)->respondWithError($this->message);
        }

        $delete = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->delete();

        if ($delete) {
            return  $this->respond($this->format([],true));
        }else {
            return $this->setStatusCode(9998)->respondWithError($this->message);
        }

    }


    //5.更改购物车   同一供应商底下所有商品的状态（选中/不选中）
    public function updateV2AllGoodsCar(Request $request){

        $validator = $this->setRules([
            'ss' => 'required|string',
            'car_id' => 'integer', //购物车id
            'supplier_id' => 'integer', //供应商id
            'flag' => 'integer|in:1,2' //1 全不选   2全选中
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        if(empty($request->car_id) && empty($request->supplier_id)){ //购物车id和供应商id不能同时为空
            return $this->setStatusCode(9999)->respondWithError($this->message);
        }elseif(!empty($request->supplier_id) && empty($request->flag)){ //如果供应商id不为空，那么flag就不能为空
            return $this->setStatusCode(9999)->respondWithError($this->message);
        }

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id


        if(!empty($request->car_id) && empty($request->supplier_id)){ //表示更改单个的状态

            //判断该条记录是否存在
            $goods_info = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->first();
            if(empty($goods_info)){ //未找到该条购物车记录
                return $this->setStatusCode(1043)->respondWithError($this->message);
            }

            if($goods_info->state == 1){
                $state = 0;
            }else{
                $state = 1;
            }
            \DB::beginTransaction(); //开启事务
            $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->update(['state'=>$state,'updated_at'=>\DB::Raw('Now()')]);

            if ($update) {
                \DB::commit();
                return  $this->respond($this->format([],true));
            }else {
                \DB::rollBack();
                return $this->setStatusCode(9998)->respondWithError($this->message);
            }


        }elseif(empty($request->car_id) && !empty($request->supplier_id) && !empty($request->flag)){ //说明点击供应商全选或全部选按钮


            //判断该条记录是否存在
            $car_id_arr = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('supplier_id',$request->supplier_id)->lists('id'); //state: 1表示选中  0 表示不选
            if(empty($car_id_arr)){ //未找到该条购物车记录
                return $this->setStatusCode(1043)->respondWithError($this->message);
            }

            \DB::beginTransaction(); //开启事务
            if($request->flag == 1){//1 全不选
                $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->whereIn('id',$car_id_arr)->update(['state'=>0,'updated_at'=>\DB::Raw('Now()')]);

            }elseif($request->flag == 2){ //  2全选中
                $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->whereIn('id',$car_id_arr)->update(['state'=>1,'updated_at'=>\DB::Raw('Now()')]);
            }

            if ($update) {
                \DB::commit();
                return  $this->respond($this->format([],true));
            }else {
                \DB::rollBack();
                return $this->setStatusCode(9998)->respondWithError($this->message);
            }


        }else{
            return $this->setStatusCode(9999)->respondWithError($this->message);
        }


    }

    //6.更改购物车：选中该商品的标志（选中/不选中）
    public function updateV2GoodsCar(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'car_id' => 'integer', //购物车id
            'flag' => 'integer|in:1,2' //1 全不选   2全选中
        ])
            ->_validate($request->all());
        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        if(!empty($request->car_id)){ //如果不为空，则表示更改单个的状态

            //判断该条记录是否存在
            $goods_info = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->first();
            if(empty($goods_info)){ //未找到该条购物车记录
                return $this->setStatusCode(1043)->respondWithError($this->message);
            }

            if($goods_info->state == 1){
                $state = 0;
            }else{
                $state = 1;
            }
            \DB::beginTransaction(); //开启事务
            $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->where('id',$request->car_id)->update(['state'=>$state,'updated_at'=>\DB::Raw('Now()')]);

            if ($update) {
                \DB::commit();
                return  $this->respond($this->format([],true));
            }else {
                \DB::rollBack();
                return $this->setStatusCode(9998)->respondWithError($this->message);
            }


        }else{ //如果没有购物车id，则说明点击全选或全部选按钮

            if(empty($request->flag)){ //如果没有flag值，则参数错误
                return $this->setStatusCode(9999)->respondWithError($this->message);
            }
            //判断该条记录是否存在
            $car_id_arr = \DB::table('ys_goods_car')->where('user_id',$user_id)->lists('id'); //state: 1表示选中  0 表示不选
            if(empty($car_id_arr)){ //未找到该条购物车记录
                return $this->setStatusCode(1043)->respondWithError($this->message);
            }

            \DB::beginTransaction(); //开启事务
            if($request->flag == 1){//1 全不选
                $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->whereIn('id',$car_id_arr)->update(['state'=>0,'updated_at'=>\DB::Raw('Now()')]);

            }elseif($request->flag == 2){ //  2全选中
                $update = \DB::table('ys_goods_car')->where('user_id',$user_id)->whereIn('id',$car_id_arr)->update(['state'=>1,'updated_at'=>\DB::Raw('Now()')]);
            }

            if ($update) {
                \DB::commit();
                return  $this->respond($this->format([],true));
            }else {
                \DB::rollBack();
                return $this->setStatusCode(9998)->respondWithError($this->message);
            }


        }


    }





}