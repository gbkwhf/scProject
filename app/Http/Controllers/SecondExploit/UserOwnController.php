<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/6/29
 * Time: 10:06
 */

namespace App\Http\Controllers\SecondExploit;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests;


/**
 * Class UserOwnController
 * @package App\Http\Controllers\SecondExploit
 * 该控制器主要用于完成新版本迭代的一些用户基本功能
 */

class UserOwnController extends  Controller
{

    //1.获取余额(积分)消耗列表
    public function getBillInfo(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'page' => 'integer'
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        $start = $request->page <= 1 ? 0 : (($request->page) - 1) * 10;//分页


        $data = \DB::table('ys_balance_bill')->select('amount','type','desc','created_at')->where('user_id',$user_id)->orderBy('created_at','desc')->skip($start)->take(10)->get();

        return  $this->respond($this->format($data));


    }

    //2.用户提现申请
    public function drawDepositBal(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'money' => 'required'
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        if($request->money <1){ //提现金额必须大于1
            return $this->setStatusCode(7003)->respondWithError($this->message);

        }

        //1.首先判断用户可提现余额是否大于等于用户申请提现的金额
        $balance = \DB::table('ys_member')->where('user_id',$user_id)->first()->balance;
        if($balance < $request->money*(1+0.08)){ //可提现余额不足  1102
            return $this->setStatusCode(1102)->respondWithError($this->message);
        }

        //2.单笔金额不超过20000
        if($request->money > 20000){ //7000

            return $this->setStatusCode(7000)->respondWithError($this->message);
        }

        //3.如果有提现中的记录则不在接收请求
        $is_exist = \DB::table('ys_apply_money_toweixin')->where('user_id',$user_id)->where('state',0)->first();
        if(!empty($is_exist)){ //7001

            return $this->setStatusCode(7001)->respondWithError($this->message);
        }

        $date = date("Y-m-d");
        //4.如果多笔提现，则每天累计提现不超过20000
        $list = \DB::table('ys_apply_money_toweixin')->where('user_id',$user_id)->where('state',1)->where('created_at','like',$date.'%')->get();
        $ti_money = 0;
        if(!empty($list)){
              foreach($list as $k=>$v){
                  $ti_money += $v->amount;
              }
        }

        if(($ti_money + $request->money) > 20000){ //7002

            return $this->setStatusCode(7002)->respondWithError($this->message);
        }

        \DB::beginTransaction(); //开启事务
        //5.接下来把申请提现的请求插入库
        $is_true = \DB::table('ys_apply_money_toweixin')->insert([
                    'user_id'=>$user_id,
                    'amount'=>$request->money,
                    'state'=>0,
                    'order_id'=>generatorOrderIdNew(),
                    'open_id'=>$request->ss,
                    'created_at'=>\DB::Raw('now()'),
                    'updated_at'=>\DB::Raw('now()')
        ]);

        $update = \DB::table('ys_member')->where('user_id',$user_id)->update(['balance'=>$balance - $request->money*(1+0.08),'updated_at'=>\DB::Raw('Now()') ]);


        if ($is_true && $update) {
            \DB::commit();
            //测试下家里是否可以操作
            return  $this->respond($this->format([],true));
        }else {
            \DB::rollBack();
            return $this->setStatusCode(9998)->respondWithError($this->message);
        }


    }


    //3.用户取消订单
    public function cancelOrder(Request $request)
    {

        $validator = $this->setRules([
            'ss' => 'required|string',
            'base_order_id' => 'required|string'
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

        //取消订单接口，未付款的订单可以取消，积分兑换的订单，取消订单，积分自动退回

        $order_info = \DB::table('ys_base_order')->select('pay_time','pay_type','amount')->where('user_id',$user_id)->where('id',$request->base_order_id)->first();


        if(empty($order_info)){ // '6100'=>'订单不存在',

            return $this->setStatusCode(6100)->respondWithError($this->message);
        }

        //'7006'=>'不能取消已支付订单',
        if(!empty($order_info->pay_time) || !empty($order_info->pay_type) || !empty($order_info->amount)){ //则表示该订单已支付，不能取消订单

            return $this->setStatusCode(7006)->respondWithError($this->message);

        }


        $all_use_score = 0;

        $sub_order_info = \DB::table('ys_base_order as a')
                             ->leftjoin('ys_sub_order as b','a.id','=','b.base_id')
                             ->select("b.back_state","b.can_back","b.use_score")
                             ->where('a.user_id',$user_id)
                             ->where('a.id',$request->base_order_id)
                             ->get();


        foreach($sub_order_info as $v){

             $all_use_score += $v->use_score;
        }

        $balance = \DB::table('ys_member')->where('user_id',$user_id)->first()->balance;

        \DB::beginTransaction(); //开启事务


        //最后在这里减去用户表的积分，并且写流水信息
        if($all_use_score > 0){

            $update_balance = \DB::table('ys_member')->where('user_id',$user_id)->update(['balance'=>$balance+$all_use_score,'updated_at'=>\DB::Raw('Now()') ]);

            $insert_bill = \DB::table('ys_balance_bill')->insert([

                'user_id'=>$user_id,
                'amount'=>"-".$all_use_score,
                'type'=>2,//类型1提现，2积分兑换
                'desc'=>'取消订单返回积分',
                'created_at'=>\DB::Raw('Now()'),
                'updated_at'=>\DB::Raw('Now()')

            ]);

        }else{

            $update_balance = 1;

            $insert_bill = 1;
        }


         $update_order = \DB::table("ys_base_order")->where('user_id',$user_id)->where('id',$request->base_order_id)->update([

                             "state"=>2,//订单状态0未付款，1，已付款  2,已取消

                         ]);


        if ($update_order && $update_balance && $insert_bill) {
            \DB::commit();
            return $this->respond($this->format([],1));
        } else {
            \DB::rollBack();
            return $this->setStatusCode(9998)->respondWithError($this->message);
        }


    }


    //4.退货
    public function userReturnGoods(Request $request){


        $validator = $this->setRules([
            'ss' => 'required|string',
            'base_order_id' => 'required|string'
        ])
            ->_validate($request->all());

        if (!$validator)  return $this->setStatusCode(9999)->respondWithError($this->message);

        $user_id = $this->getUserIdBySession($request->ss); //获取用户id

       //退货接口，满足条件的订单可以退货（同上），退货是整单退款，退货记录插入ys_return_order表，（后台操作修改订单状态)


        $sub_order_info = \DB::table('ys_base_order as a')
                                ->leftjoin('ys_sub_order as b','a.id','=','b.base_id')
                                ->select('a.amount',"b.back_state","b.can_back","b.use_score")
                                ->where('a.user_id',$user_id)
                                ->where('a.id',$request->base_order_id)
                                ->where('a.state',1) //订单状态0未付款，1，已付款  2,已取消
                                ->get();

        if(empty($sub_order_info)){ // '6100'=>'订单不存在',

            return $this->setStatusCode(6100)->respondWithError($this->message);
        }


        $amount = 0;

        foreach($sub_order_info as $v){

              if($v->back_state == 1){ //是否退货，0未退，1已退
                  return $this->setStatusCode(7008)->respondWithError($this->message);
              }

              if($v->can_back == 1){ //是否可退货0,可以退，1不可以退
                  return $this->setStatusCode(7007)->respondWithError($this->message);
              }

             $amount = is_null($v->amount) ? 0 : $v->amount;
        }


        $insert = \DB::table("ys_return_order")->insert([

                     'base_order_id'=>$request->base_order_id,
                     'user_id'=>$user_id,
                     'state'=>0,//状态0申请中，1已通过，2，拒绝
                     'amount'=>$amount,
                     'created_at'=>\DB::Raw('Now()'),
                     'updated_at'=>\DB::Raw('Now()'),

                ]);

        if ($insert) {

            return $this->respond($this->format([],1));
        } else {

            return $this->setStatusCode(9998)->respondWithError($this->message);
        }



    }




}